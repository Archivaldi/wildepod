<% include ../../partials/header %>
<% include ../../partials/navbar %>


<div class="categorization_page">
        <div class="images_div">
            <a href="" class="modal_open" rel="modal:open">
                <img style="width: 50%; height: 60rem;" src="" alt="">
            </a>
            <div class="number_of_picture">
                
            </div>
        </div>

        <div id="" class="modal">
            <img src="" alt="">
            <button class="zoom zoom_out">+</button>
            <button class="zoom zoom_in">-</button>
        </div>


        <div class="annotation">

            <div class="species_count">
                <label for="species_count">How many species do you see on the picture? </label>
                <input id="species_count" name="species_count" onchange="append_species()" type="number" min="1" max="5" value="1" required>
            </div>

            <div class="species">
                <div class="labels">
                    <div class="row">
                        <div class="col-1-of-2">
                            <h3>Species</h3>
                        </div>
                        <div class="col-1-of-2">
                            <h3>Number of individuals</h3>
                        </div>
                    </div>
                </div>
                <div class="species_rows">
                    <div class="row">
                        <div class="col-1-of-2">
                            <select name="species_input_1" id="species_input_1" required></select>
                        </div>
                        <div class="col-1-of-2">
                            <input type="number" min="1" value="1" name="quantity_input_1" id="quantity_input_1" required>
                        </div>
                    </div>
                </div>
            </div>   
            <div class="pic_or_vid">
                <label for="is_video">Is it video or picture? </label>
                <select name="is_video" id="is_video" required>
                    <option value="">Please select</option>
                    <option value="1">Video</option>
                    <option value="0">Picture</option>
                </select>
            </div>
            <div class="is_exeptional">
                <label for="is_exceptional">Add to "Best Of" list: </label>
                <input type="checkbox" id="is_exceptional" name="is_exceptional"> 
            </div>
            <div class="submit">
                <button onclick="previous_picture()"> <- Previous </button>
                <button onclick="categorize()">Categorize</button>
                <button class=".finish_categorize" type="button" onclick="stop_categorize()">Finish categorize</button>
                <button onclick="next_picture()"> Next -> </button>
            </div>
            <div class="flag">
                <label for="flag">Flag the image</label>
                <input type="checkbox" id="flag" name="flag" onchange="append_issue_types()">
                <div class="issue_types"></div>
                <div class="blank"><button onclick="mark_as_blank()" type="button">Mark as blank</button></div>
            </div>
        </div>
</div>


<% include ../../partials/scripts %>

<script>
    let images = [];
    let options = [];
    let agent = "human";
    let count;

     //update picture src and alt
     function update_image() {
        let img = $("img")[0];
        let modal_img = $("img")[1];
        let modal_open = $(".modal_open")[0];
        let modal_div = $(".modal")[0];

        img.src = images[count].image_path;
        img.alt = images[count].image_name;
        modal_img.src = images[count].image_path;
        modal_img.alt = images[count].image_name;
        modal_open.href = "#" + images[count].image_id;
        modal_div.id = images[count].image_id;
    };

    //take previous picture
    const previous_picture = () => {
        if (count > 0){
            count-=1;
            localStorage.setItem("count", count);
            update_image();
            let number_of_picture = $(".number_of_picture");
                number_of_picture.text(count+1 + "/" + images.length);
        };
    };

    //show next image
    const next_picture = () => {
        if (count < images.length){
            count += 1;
            localStorage.setItem("count", count);
            update_image();
            let number_of_picture = $(".number_of_picture");
                number_of_picture.text(count+1 + "/" + images.length);
        };
    };

    //save categorization
    const categorize = () => {
        let annotation_date = moment().format("YYYY-MM-DD hh:mm:ss");
        let user_id = localStorage.getItem("user_id");
        let species_count = parseInt($("#species_count").val());
        let is_video = $("#is_video").val();
        let image_id = images[count].image_id;
        let is_exceptional = document.getElementById("is_exceptional").checked;
        if (is_exceptional){
            is_exceptional = "1";
        } else {
            is_exceptional = "0";
        }

        if (is_video === "" || $("#species_input_1").val() === ""){
            alert("Please fill out all questions");
        } else {

            //check if we have unfilled form
            let check_inputs = [];
            for (let i = 1; i <= species_count; i++){
                let species_id = $("#species_input_" + i).val();
                check_inputs.push(species_id);
            }

            if (check_inputs.includes("")){
                alert("Please fill out all questions");
            } else {

                remove_old_answers(image_id);

                for (let i = 1; i <= species_count; i++){
                    let species_id = $("#species_input_" + i).val();
                    let species_count = $("#quantity_input_" + i).val();
                    let annotation = [image_id ,annotation_date, user_id, species_id, species_count, is_exceptional, is_video, agent];
                    console.log(annotation);

                    if (localStorage.getItem("annotations") === ""){
                        localStorage.setItem("annotations", `[${JSON.stringify(annotation)}]`);
                    } else {
                        let annotations = JSON.parse(localStorage.getItem("annotations"));
                        annotations.push(annotation);
                        localStorage.setItem("annotations", JSON.stringify(annotations));
                    };
                };

                let flag = document.getElementById("flag").checked;
                if (flag) {
                    let issue_date = moment().format("YYYY-MM-DD");
                    let issue_select = $("#issue_select").val();
                    let notes_input = $("#notes_input").val();

                    let flag = ["New", image_id, user_id, issue_select, issue_date, notes_input];
                    if (localStorage.getItem("flags") === ""){
                        localStorage.setItem("flags", `[${JSON.stringify(flag)}]`);
                    } else {
                        let flags = JSON.parse(localStorage.getItem("flags"));
                        flags.push(flag);
                        localStorage.setItem("flags", JSON.stringify(flags));
                    }
                };

                let image_status = [image_id, user_id, annotation_date, "Cataloged"];

                if (localStorage.getItem("image_status") === ""){
                    localStorage.setItem("image_status", `[${JSON.stringify(image_status)}]`);
                } else {
                    let image_statuses = JSON.parse(localStorage.getItem("image_status"));
                    image_statuses.push(image_status);
                    localStorage.setItem("image_status", JSON.stringify(image_statuses));
                };

                if (count !== images.length){
                    count += 1;
                    localStorage.setItem("count", count);
                    update_image();
                    let number_of_picture = $(".number_of_picture");
                        number_of_picture.text(count+1 + "/" + images.length);
                }                                           
            };
        };

    };

    //remove old answers if exist
    const remove_old_answers = (image_id) => {
        if (localStorage.getItem("annotations") !== ""){
            let annotations_storage = JSON.parse(localStorage.getItem("annotations"));
            for (let i = 0; i < annotations_storage.length; i++){
                if (annotations_storage[i][0] === image_id){
                    annotations_storage.splice(i, 1);
                };
            ;}
            localStorage.setItem("annotations", JSON.stringify(annotations_storage));
        };

        if (localStorage.getItem("flags" !== "")){
            let flags_storage = JSON.parse(localStorage.getItem("flags"));
            for (let i = 0; i < flags_storage.length; i++){
                if (flags_storage[i][1] === image_id){
                    flags_storage.splice(i, 1);
                };
            };
            localStorage.setItem("flags", JSON.stringify(flags_storage));
        };

        if (localStorage.getItem("image_status") !== ""){
            let image_status_storage = JSON.parse(localStorage.getItem("image_status"));
            for (let i = 0; i < image_status_storage.length; i++){
                if (image_status_storage[i][0] === image_id){
                    image_status_storage.splice(i,1);
                };
            };
            localStorage.setItem("image_status", JSON.stringify(image_status_storage));
        };
    };

    //upodate images in local storage or continue the progress
    const take_images = () => {
        if (localStorage.getItem("images") === null){
            $.ajax({
                url: "/categorization/images"
            }).then(r => {
                let number_of_picture = $(".number_of_picture");
                    number_of_picture.text("1/" + r[0].length);
                localStorage.setItem("images", JSON.stringify(r[0]));
                localStorage.setItem("species", JSON.stringify(r[1]));
                localStorage.setItem("user_id", r[2]);
                localStorage.setItem("annotations", "");
                localStorage.setItem("flags", "");
                localStorage.setItem("image_status", '');
                localStorage.setItem("count", 0);
                count = 0;
                images = JSON.parse(localStorage.getItem("images"));
                update_image();
                let species = JSON.parse(localStorage.getItem("species"));

                options.push($("<option>").attr("value", "").text("Please select"));
                for (let j = 0; j < species.length; j++){
                        let option = $("<option>").attr("value", species[j].species_id).text(species[j].common_name);
                    options.push(option);
                };

                let species_input = $("#species_input_1");
                for (let i = 0; i < options.length; i++){
                        options[i].clone().appendTo(species_input);
                };

            });
        } else {
            images = JSON.parse(localStorage.getItem("images"));
            let species = JSON.parse(localStorage.getItem("species"));
            count = parseInt(localStorage.getItem("count"));

            let number_of_picture = $(".number_of_picture");
                number_of_picture.text(count+1 + "/" + images.length);

            options.push($("<option>").attr("value", "").text("Please select"));
            for (let j = 0; j < species.length; j++){
                let option = $("<option>").attr("value", species[j].species_id).text(species[j].common_name);
                options.push(option)
            };

            let species_input = $("#species_input_1");
            for (let i = 0; i < options.length; i++){
                    options[i].clone().appendTo(species_input);
            };
            update_image();
        };
    };

    window.onload = take_images;

    //stop categorizin
    const stop_categorize = () => {
        if (localStorage.getItem("annotations") !== ""){
            let data = [];
            let annotations = JSON.parse(localStorage.getItem("annotations"));
            let image_statuses = JSON.parse(localStorage.getItem("image_status"));
            data.push(annotations, image_statuses);
            if (localStorage.getItem("flags") !== ""){
                let flags = JSON.parse(localStorage.getItem("flags"));
                data.push(flags);
            };

            $.ajax({
                url: "/stop_categorize",
                method: "POST",
                data: {data}
            }).then(() => {
                localStorage.clear();
                window.location.href = "/profile";
            })
        } else {
            alert("No categorized pictures found");
        }
    };

    //mark as blank
    const mark_as_blank = () => {
        let images = $("img");
        let images_id = [];
        for (let i = 0; i < images.length; i++){
            images_id.push([images[i].getAttribute("meta-data")]);
        };

        $.ajax({
            url: "/categorization/mark_as_blank",
            method: "POST",
            data: {images_id},
            success: window.location.replace("/categorization")
        });
    };

    // //if picture has an issue
    const append_issue_types = () => {
        let flag = $("#flag");
        let issue_types = $(".issue_types");
        if (flag.prop("checked") === true){
            let label = $("<label>").attr("for", "issue_select").text("Flag the image as: ");
            let input = $("<select>").attr("id", "issue_select").attr("name", "issue_type");
            let option_unsure = $("<option>").attr("value", "unsure_species").text("Unsure species");
                input.append(option_unsure);
            let notes_label = $("<label>").attr("for", "notes_input").text("Notes: ").css("display", "block");
            let notes_input = $("<textarea>").attr("id", "notes_input").attr("name", "notes").attr("max", "249").prop("required", true).css("width", "30rem").css("height", "10rem");
                issue_types.append(label, input, notes_label, notes_input);
                $(".blank").empty();
        } else {
            issue_types.empty();
            $(".blank").append("<button onclick='mark_as_blank()' type='button'>Mark as blank</button>");
        };
    };

    // //if more than 1 spicies
    const append_species = () => {
        let species_count = $("#species_count").val();
        let species_rows = $(".species_rows");
        species_rows.empty();

        const put_species = async (i) => {
            if (i <= species_count){
                let row = $("<div>").attr("class", "row");
                let species_input_div = $("<div>").attr("class", "col-1-of-2");
                let species_input = $("<select>").attr("id", "species_input_"+i).attr("name", "species_input_"+i).attr("class", "species_input").prop("required", true);
                    for (let i = 0; i < options.length; i++){
                        options[i].clone().appendTo(species_input);
                    };
                    species_input.clone().appendTo(species_input_div);
                let quantity_div = $("<div>").attr("class", "col-1-of-3");
                let quantity_input = $("<input>").attr("id", "quantity_input_"+i).attr("name", "quantity_input_"+i).attr("class", "quantity_input").attr("type", "number").attr("min", "1").attr("value", "1");
                    quantity_div.append(quantity_input);
                    row.append(species_input_div, quantity_div);
                    species_rows.append(row);

                if (i < 5){
                    put_species(i+1)
                }; 
            }
        };
        put_species(1);
    };

    $(".zoom_in").on("click", function() {
        let img = $(this).parent().children().eq(0);
        let currentHeight = parseInt(img.css("height"));
        let currentWidth = parseInt(img.css("width"));
        img.css("height", currentHeight-20+"px").css("width", currentWidth-20+"px");
    });

    $(".zoom_out").on("click", function() {
        let img = $(this).parent().children().eq(0);
        let currentHeight = parseInt(img.css("height"));
        let currentWidth = parseInt(img.css("width"));
        img.css("height", currentHeight+20+"px").css("width", currentWidth+20+"px");
    });

</script>